# -*- coding: utf-8 -*-
"""parkinson's disease detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BUCqW4-m0cBxILrpcaXJNk7PLb9Ap_7-
"""

import numpy as np
import pandas as pd
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score

"""EDA"""

#loading data from csv to pandas dataframe
parkinsons=pd.read_csv('/content/parkinsons.csv')
print(parkinsons.head())
parkinsons_data=parkinsons.drop(columns=['name'])
print(parkinsons_data.head())

#gettting info on the dataset
parkinsons_data.info()

#checking if there's a missing value or not
parkinsons_data.isnull().sum()

#distribution of target variable
parkinsons_data['status'].value_counts()

parkinsons_data.groupby('status').mean()

"""DATA PRE-PROCESSING

Separating features and target
"""

X=parkinsons_data.drop(columns=['status'],axis=1)
Y=parkinsons_data['status']

"""**Splitting training data and testing data**"""

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=2)
print(x_train.shape,x_test.shape, X.shape)

"""DATA STANDARDISATION"""

scaler=StandardScaler()

scaler.fit(x_train)

x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)

"""Model Training

Support Vector Machine Model
"""

model=svm.SVC(kernel='linear')
model.fit(x_train,y_train)

"""**MODEL EVALUATION**

Accuracy score
"""

#accuracy score on training data:
x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(y_train,x_train_prediction)

print("accuracy on training data: ",training_data_accuracy)

#accuracy score om test data
x_test_prediction=model.predict(x_test)
testing_data_accuracy=accuracy_score(y_test,x_test_prediction)

print("accuracy on testing data: ",testing_data_accuracy)

"""**BUILDING A PREDICTIVE SYSTEM**"""

input_data=(136.35800,176.59500,65.75000,0.00971,0.00007,0.00534,0.00478,0.01601,0.04978,0.48300,0.02749,0.02466,0.03736,0.08247,0.03361,18.57000,0.543299,0.733232,-5.207985,0.224852,2.642276,0.242981)
#changing input data as numpy array
data=np.asarray(input_data)
#reshaping the data
data_reshaped=data.reshape(1,-1)
#standardising the data
std_data=scaler.transform(data_reshaped)
prediction=model.predict(std_data)
if(prediction[0]==0):
  print("the patient does not have parkinsons")
else:
  print("the patient has parkinsons")
